(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{1486:function(a,s,t){"use strict";t.r(s);var n=t(26),r=Object(n.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"_3-eureka整合ribbon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-eureka整合ribbon"}},[a._v("#")]),a._v(" 3. Eureka整合Ribbon")]),a._v(" "),n("h2",{attrs:{id:"_3-1-什么是-ribbon"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是-ribbon"}},[a._v("#")]),a._v(" 3.1 什么是 Ribbon")]),a._v(" "),n("p",[a._v("Ribbon 是一个基于 HTTP 和 TCP 的 "),n("strong",[a._v("客服端负载均衡工具")]),a._v("，它是基于 Netflix Ribbon 实现的。")]),a._v(" "),n("p",[a._v("它不像 Spring Cloud 服务注册中心、配置中心、API 网关那样独立部署，但是它几乎存在于每个 Spring Cloud微服务中。包括 Feign 提供的声明式服务调用也是基于该 Ribbon 实现的。")]),a._v(" "),n("p",[a._v("Ribbon 默认提供很多种负载均衡算法，例如"),n("strong",[a._v("轮询、随机")]),a._v("等等。甚至包含自定义的负载均衡算法。")]),a._v(" "),n("h2",{attrs:{id:"_3-2-负载均衡不同方案的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-负载均衡不同方案的区别"}},[a._v("#")]),a._v(" 3.2 负载均衡不同方案的区别")]),a._v(" "),n("p",[a._v("目前业界主流的负载均衡方案可分成两类：")]),a._v(" "),n("ol",[n("li",[n("p",[n("strong",[a._v("集中式负载均衡(服务器负载均衡)")]),a._v("，即在 consumer 和 provider 之间使用独立的负载均衡设施(可以是硬\n件，如 F5，也可以是软件，如 nginx)，由该设施负责把访问请求通过某种策略转发至 provider；")])]),a._v(" "),n("li",[n("p",[n("strong",[a._v("进程内负载均衡(客户端负载均衡)")]),a._v("，将负载均衡逻辑集成到 consumer，consumer 从服务注册中心获知有\n哪些地址可用，然后自己再从这些地址中选择出一个合适的 provider。Ribbon 属于后者，它只是一个类库，集\n成于 consumer 进程，consumer 通过它来获取 provider 的地址。")])])]),a._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"负载均衡",href:"./image/eureka09.jpg"}},[n("img",{attrs:{src:t(821),alt:"负载均衡"}})])]),a._v(" "),n("h2",{attrs:{id:"_3-3-ribbon-负载均衡策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-ribbon-负载均衡策略"}},[a._v("#")]),a._v(" 3.3 Ribbon 负载均衡策略")]),a._v(" "),n("h3",{attrs:{id:"_3-3-1-轮询策略-默认"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-轮询策略-默认"}},[a._v("#")]),a._v(" 3.3.1 轮询策略（默认）")]),a._v(" "),n("p",[a._v("策略对应类名： RoundRobinRule")]),a._v(" "),n("p",[a._v("实现原理：轮询策略表示每次都顺序取下一个 provider，比如一共有 5 个 provider，第 1 次取第 1 个，第 2 次\n取第 2 个，第 3 次取第 3 个，以此类推。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-2-权重轮询策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-权重轮询策略"}},[a._v("#")]),a._v(" 3.3.2 权重轮询策略")]),a._v(" "),n("p",[n("strong",[a._v("策略对应类名")]),a._v("： WeightedResponseTimeRule")]),a._v(" "),n("p",[n("strong",[a._v("实现原理：")]),a._v("\n根据每个 provider 的响应时间分配一个权重，响应时间越长，权重越小，被选中的可能性越低。\n原理：一开始为轮询策略，并开启一个计时器，每 30 秒收集一次每个 provider 的平均响应时间，当信息足够\n时，给每个 provider 附上一个权重，并按权重随机选择 provider，高权越重的 provider 会被高概率选中。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-3-随机策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-随机策略"}},[a._v("#")]),a._v(" 3.3.3 随机策略")]),a._v(" "),n("p",[n("strong",[a._v("策略对应类名")]),a._v("： RandomRule")]),a._v(" "),n("p",[n("strong",[a._v("实现原理")]),a._v("：从 provider 列表中随机选择一个。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-4-最少并发数策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-4-最少并发数策略"}},[a._v("#")]),a._v(" 3.3.4 最少并发数策略")]),a._v(" "),n("p",[n("strong",[a._v("策略对应类名")]),a._v("： BestAvailableRule")]),a._v(" "),n("p",[n("strong",[a._v("实现原理")]),a._v("：选择正在请求中的并发数最小的 provider，除非这个 provider 在熔断中。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-5-重试策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-5-重试策略"}},[a._v("#")]),a._v(" 3.3.5 重试策略")]),a._v(" "),n("p",[n("strong",[a._v("策略对应类名")]),a._v("： RetryRule")]),a._v(" "),n("p",[n("strong",[a._v("实现原理")]),a._v("：其实就是轮询策略的增强版，轮询策略服务不可用时不做处理，重试策略服务不可用时会重新尝试集\n群中的其他节点。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-6-可用性敏感策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-6-可用性敏感策略"}},[a._v("#")]),a._v(" 3.3.6 可用性敏感策略")]),a._v(" "),n("p",[n("strong",[a._v("策略对应类名")]),a._v("： AvailabilityFilteringRule")]),a._v(" "),n("p",[n("strong",[a._v("实现原理")]),a._v("：过滤性能差的 provider\n第一种：过滤掉在 Eureka 中处于一直连接失败的 provider。\n第二种：过滤掉高并发（繁忙）的 provider。")]),a._v(" "),n("h3",{attrs:{id:"_3-3-7-区域敏感性策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-7-区域敏感性策略"}},[a._v("#")]),a._v(" 3.3.7 区域敏感性策略")]),a._v(" "),n("p",[n("strong",[a._v("策略对应类名")]),a._v("： ZoneAvoidanceRule")]),a._v(" "),n("p",[n("strong",[a._v("实现原理")]),a._v("：\n以一个区域为单位考察可用性，对于不可用的区域整个丢弃，从剩下区域中选可用的 provider。\n如果这个 ip 区域内有一个或多个实例不可达或响应变慢，都会降低该 ip 区域内其他 ip 被选中的权重。")]),a._v(" "),n("h2",{attrs:{id:"_3-4-ribbon-负载均衡策略设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-ribbon-负载均衡策略设置"}},[a._v("#")]),a._v(" 3.4 Ribbon 负载均衡策略设置")]),a._v(" "),n("p",[n("strong",[a._v("Ribbon不需要额外引入其他依赖，只在消费者配置处理")])]),a._v(" "),n("h3",{attrs:{id:"_3-4-1-全局设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-全局设置"}},[a._v("#")]),a._v(" 3.4.1 全局设置")]),a._v(" "),n("p",[n("strong",[a._v("在启动类或配置类中注入负载均衡策略对象。所有服务请求均使用该策略。")])]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RandomRule")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("randomRule")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RandomRule")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("h3",{attrs:{id:"_3-4-2-局部设置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-局部设置"}},[a._v("#")]),a._v(" 3.4.2 局部设置")]),a._v(" "),n("p",[n("strong",[a._v("修改配置文件指定服务的负载均衡策略。格式： 服务应用名.ribbon.NFLoadBalancerRuleClassName")])]),a._v(" "),n("div",{staticClass:"language-yml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-yml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 负载均衡策略")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# service-provider 为调用的服务的名称")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("service-provider")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ribbon")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   NFLoadBalancerRuleClassName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" com.netflix.loadbalancer.RandomRule\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h2",{attrs:{id:"_3-5-ribbon-点对点直连"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-ribbon-点对点直连"}},[a._v("#")]),a._v(" 3.5 Ribbon 点对点直连")]),a._v(" "),n("p",[a._v("点对点直连是指绕过注册中心，直接连接服务提供者获取服务，一般在测试阶段使用比较多")]),a._v(" "),n("h3",{attrs:{id:"添加依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖"}},[a._v("#")]),a._v(" 添加依赖")]),a._v(" "),n("p",[a._v("在 pom 文件中引入 Ribbon，需要注意的是如果 pom 中有 Eureka 的依赖，则需要去除 Eureka 的依赖。")]),a._v(" "),n("div",{staticClass:"language-xml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("\x3c!-- netflix ribbon 依赖 --\x3e")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.cloud"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-cloud-starter-netflix-ribbon"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h3",{attrs:{id:"配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[a._v("#")]),a._v(" 配置文件")]),a._v(" "),n("p",[a._v("配置文件中关闭 Eureka，添加直连的服务地址。如果不设置负载均衡策略默认使用轮询策略。")]),a._v(" "),n("div",{staticClass:"language-yml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-yml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 负载均衡策略")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# service-provider 为调用的服务的名称")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("service-provider")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ribbon")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   NFLoadBalancerRuleClassName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" com.netflix.loadbalancer.RandomRule\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定具体的 Provider 服务列表，多个用逗号隔开")]),a._v("\n   listOfServers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("7070")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("http"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//localhost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("7071")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 关闭 Eureka 实现 Ribbon 点对点直连")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ribbon")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("eureka")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   enabled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("false")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# false：关闭，true：开启")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("h3",{attrs:{id:"访问"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问"}},[a._v("#")]),a._v(" 访问")]),a._v(" "),n("p",[a._v("关闭 Eureka 注册中心，服务提供者由于无法连接至注册中心所以会报连接异常。但是服务是可以正常可消费\n的，所以目前使用的是点对点的方式来进行调用的。")])])}),[],!1,null,null,null);s.default=r.exports},821:function(a,s,t){a.exports=t.p+"assets/img/eureka09.a24d1eb9.jpg"}}]);