(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{1477:function(a,e,t){"use strict";t.r(e);var n=t(26),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"_4-spring之bean生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring之bean生命周期"}},[a._v("#")]),a._v(" 4. Spring之Bean生命周期")]),a._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_4-1-生成beandefinition"}},[a._v("4.1  生成BeanDefinition")])])])]),n("p"),a._v(" "),n("p",[n("a",{attrs:{"data-fancybox":"",title:"Bean的生成过程",href:"./image/beancreate.jpg"}},[n("img",{attrs:{src:t(799),alt:"Bean的生成过程"}})])]),a._v(" "),n("h2",{attrs:{id:"_4-1-生成beandefinition"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-生成beandefinition"}},[a._v("#")]),a._v(" 4.1  生成BeanDefinition")]),a._v(" "),n("p",[a._v("Spring启动的时候会进行扫描，会先调用")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("org"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("springframework"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("annotation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("ClassPathScanningCandidateComponentProvider")]),a._v("#"),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("scanCandidateComponents")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" basePackage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("扫描某个包路径，并得到BeanDefinition的Set集合。")]),a._v(" "),n("p",[a._v("Spring扫描底层流程：https://www.processon.com/view/link/61370ee60e3e7412ecd95d43")]),a._v(" "),n("ol",[n("li",[a._v("首先，通过ResourcePatternResolver获得指定包路径下的所有.class文件（Spring源码中将此文件包装成了Resource对象）")]),a._v(" "),n("li",[a._v("遍历每个Resource对象")]),a._v(" "),n("li",[a._v("利用MetadataReaderFactory解析Resource对象得到MetadataReader（在Spring源码中MetadataReaderFactory具体的实现类为CachingMetadataReaderFactory，MetadataReader的具体实现类为SimpleMetadataReader）")]),a._v(" "),n("li",[a._v("利用MetadataReader进行excludeFilters和includeFilters，以及条件注解@Conditional的筛选（条件注解并不能理解：某个类上是否存在@Conditional注解，如果存在则调用注解中所指定的类的match方法进行匹配，匹配成功则通过筛选，匹配失败则pass掉。）")]),a._v(" "),n("li",[a._v("筛选通过后，基于metadataReader生成ScannedGenericBeanDefinition")]),a._v(" "),n("li",[a._v("再基于metadataReader判断是不是对应的类是不是接口或抽象类")]),a._v(" "),n("li",[a._v("如果筛选通过，那么就表示扫描到了一个Bean，将ScannedGenericBeanDefinition加入结果集")])]),a._v(" "),n("p",[a._v("MetadataReader表示类的元数据读取器，主要包含了一个AnnotationMetadata，功能有")]),a._v(" "),n("ol",[n("li",[a._v("获取类的名字、")]),a._v(" "),n("li",[a._v("获取父类的名字")]),a._v(" "),n("li",[a._v("获取所实现的所有接口名")]),a._v(" "),n("li",[a._v("获取所有内部类的名字")]),a._v(" "),n("li",[a._v("判断是不是抽象类")]),a._v(" "),n("li",[a._v("判断是不是接口")]),a._v(" "),n("li",[a._v("判断是不是一个注解")]),a._v(" "),n("li",[a._v("获取拥有某个注解的方法集合")]),a._v(" "),n("li",[a._v("获取类上添加的所有注解信息")]),a._v(" "),n("li",[a._v("获取类上添加的所有注解类型集合")])])])}),[],!1,null,null,null);e.default=s.exports},799:function(a,e,t){a.exports=t.p+"assets/img/beancreate.4fc3c095.jpg"}}]);