(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{1483:function(t,s,r){"use strict";r.r(s);var _=r(26),i=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_1-hystrix简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-hystrix简介"}},[t._v("#")]),t._v(" 1. Hystrix简介")]),t._v(" "),_("p",[t._v("Hystrix 源自 Netflix 团队于 2011 年开始研发。2012年 Hystrix 不断发展和成熟，Netflix 内部的许多团队都采用了它。如今，每天在 Netflix 上通过 Hystrix 执行数百亿个线程隔离和数千亿个信号量隔离的调用。极大地提高了系统的稳定性。")]),t._v(" "),_("p",[t._v("在分布式环境中，不可避免地会有许多服务依赖项中的某些服务失败而导致"),_("strong",[t._v("雪崩效应")]),t._v("。")]),t._v(" "),_("p",[t._v("Hystrix 是一个库，可通过添加等待时间容限和容错逻辑来帮助您控制这些分布式服务之间的交互")]),t._v(" "),_("p",[t._v("Hystrix 通过"),_("strong",[t._v("隔离服务之间的访问点")]),t._v("，停止服务之间的级联故障并提供后备选项来实现此目的，所有这些都可以提高系统的整体稳定性。")]),t._v(" "),_("h2",{attrs:{id:"_1-1-雪崩效应"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-雪崩效应"}},[t._v("#")]),t._v(" 1.1 雪崩效应")]),t._v(" "),_("p",[t._v("在微服务架构中，一个请求需要调用多个服务是非常常见的。如客户端访问 A 服务，而 A 服务需要调用 B 服\n务，B 服务需要调用 C 服务，由于网络原因或者自身的原因，如果 B 服务或者 C 服务不能及时响应，A 服务将处于\n阻塞状态，直到 B 服务 C 服务响应。此时若有大量的请求涌入，容器的线程资源会被消耗完毕，导致服务瘫痪。服\n务与服务之间的依赖性，故障会传播，造成连锁反应，会对整个微服务系统造成灾难性的严重后果，这就是服务故障\n的“雪崩”效应。以下图示完美解释了什么是雪崩效应")]),t._v(" "),_("p",[t._v("当一切服务正常时，请求看起来是这样的：")]),t._v(" "),_("p",[_("a",{attrs:{"data-fancybox":"",title:" Hystrix",href:"./image/Hystrix01.jpg"}},[_("img",{attrs:{src:r(827),alt:"Hystrix"}})])]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("当其中一个服务有延迟时，它可能阻塞整个用户请求:")]),t._v(" "),_("p",[_("a",{attrs:{"data-fancybox":"",title:" Hystrix",href:"./image/Hystrix02.jpg"}},[_("img",{attrs:{src:r(828),alt:"Hystrix"}})])]),t._v(" "),_("p",[t._v("在高并发的情况下，一个服务的延迟可能导致所有服务器上的所有资源在数秒内饱和。比起服务故障，更糟糕的\n是这些应用程序还可能导致服务之间的延迟增加，从而备份队列，线程和其他系统资源，从而导致整个系统出现更多\n级联故障。")]),t._v(" "),_("p",[_("a",{attrs:{"data-fancybox":"",title:" Hystrix",href:"./image/Hystrix03.jpg"}},[_("img",{attrs:{src:r(829),alt:"Hystrix"}})])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("造成雪崩的原因可以归结为以下三点：")]),t._v(" "),_("ol",[_("li",[t._v("服务提供者不可用（硬件故障，程序 BUG，缓存击穿，用户大量请求等）")]),t._v(" "),_("li",[t._v("重试加大流量（用户重试，代码逻辑重试）")]),t._v(" "),_("li",[t._v("服务消费者不可用（同步等待造成的资源耗尽）")])])]),t._v(" "),_("p",[_("strong",[t._v("最终的结果就是：一个服务不可用，导致一系列服务的不可用。")])]),t._v(" "),_("h3",{attrs:{id:"_1-1-1-雪崩效应解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-雪崩效应解决方案"}},[t._v("#")]),t._v(" 1.1.1 雪崩效应解决方案")]),t._v(" "),_("p",[t._v("雪崩是系统中的蝴蝶效应导致，其发生的原因多种多样，从源头我们无法完全杜绝雪崩的发生，但是雪崩的根本\n原因"),_("strong",[t._v("来源于服务之间的强依赖")]),t._v("，所以我们可以提前评估做好服务容错。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("解决方案")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("请求缓存")]),t._v("：支持将一个请求与返回结果做缓存处理；")]),t._v(" "),_("li",[_("strong",[t._v("请求合并")]),t._v("：将相同的请求进行合并然后调用批处理接口；")]),t._v(" "),_("li",[_("strong",[t._v("服务隔离")]),t._v("：限制调用分布式服务的资源，某一个调用的服务出现问题不会影响其他服务调用；")]),t._v(" "),_("li",[_("strong",[t._v("服务熔断")]),t._v("：牺牲局部服务，保全整体系统稳定性的措施；")]),t._v(" "),_("li",[_("strong",[t._v("服务降级")]),t._v("：服务熔断以后，客户端调用自己本地方法返回缺省值。")])])])])}),[],!1,null,null,null);s.default=i.exports},827:function(t,s,r){t.exports=r.p+"assets/img/Hystrix01.3615ab9f.jpg"},828:function(t,s,r){t.exports=r.p+"assets/img/Hystrix02.bb3c23c7.jpg"},829:function(t,s,r){t.exports=r.p+"assets/img/Hystrix03.b1cabe50.jpg"}}]);