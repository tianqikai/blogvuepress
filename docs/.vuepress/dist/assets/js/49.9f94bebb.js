(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{693:function(e,t,o){e.exports=o.p+"assets/img/zookeeper9.689be90f.jpg"},694:function(e,t,o){e.exports=o.p+"assets/img/zookeeper12.9db7d61e.jpg"},695:function(e,t,o){e.exports=o.p+"assets/img/zookeeper11.2415b252.jpg"},857:function(e,t,o){"use strict";o.r(t);var r=o(26),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"三、zookeeper内部原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、zookeeper内部原理"}},[e._v("#")]),e._v(" 三、zookeeper内部原理")]),e._v(" "),r("h2",{attrs:{id:"_3-1-选举机制-面试重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-选举机制-面试重点"}},[e._v("#")]),e._v(" 3.1 选举机制（面试重点）")]),e._v(" "),r("p",[e._v("1）半数机制：集群中"),r("font",{attrs:{color:"red"}},[r("strong",[e._v("半数以上机器存活")])]),e._v("，集群可用；所以Zookeeper适合安装"),r("font",{attrs:{color:"red"}},[r("strong",[e._v("奇数")])]),e._v("台服务器。"),r("br"),e._v("\n2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，"),r("font",{attrs:{color:"red"}},[r("strong",[e._v("Leader是通过内部的选举机制临时产生的")])]),e._v("。"),r("br"),e._v("\n3）以一个简单的例子来说明整个选举的过程。"),r("br"),e._v("\n假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。"),r("br"),e._v("\n假设这些服务器依序启动，来看看会发生什么，如下图所示。")],1),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper选举机制",href:"../image/zookeeper9.jpg"}},[r("img",{attrs:{src:o(693),alt:"Zookeeper选举机制"}})])]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[r("font",{attrs:{color:"red"}},[e._v("Zookeeper选举机制(五台为例)")])],1),e._v(" "),r("ol",[r("li",[e._v("服务器 1 启动，发起一次选举。服务器 1 投自己一票。此时服务器 1 票数一票，\n不够半数以上（3 票），选举无法完成，服务器 1 状态保持为 LOOKING；")]),e._v(" "),r("li",[e._v("服务器 2 启动，再发起一次选举。服务器 1 和 2 分别投自己一票并交换选票信息：\n此时服务器 1 发现服务器 2 的 ID 比自己目前投票推举的（服务器 1）大，更改选票为推举\n服务器 2。此时服务器 1 票数 0 票，服务器 2 票数 2 票，没有半数以上结果，选举无法完成，\n服务器 1，2 状态保持 LOOKING")]),e._v(" "),r("li",[e._v("服务器 3 启动，发起一次选举。此时服务器 1 和 2 都会更改选票为服务器 3。此\n次投票结果：服务器 1 为 0 票，服务器 2 为 0 票，服务器 3 为 3 票。此时服务器 3 的票数已\n经超过半数，服务器 3 当选 Leader。服务器 1，2 更改状态为 FOLLOWING，服务器 3 更改\n状态为 LEADING；")]),e._v(" "),r("li",[e._v("服务器 4 启动，发起一次选举。此时服务器 1，2，3 已经不是 LOOKING 状态，\n不会更改选票信息。交换选票信息结果：服务器 3 为 3 票，服务器 4 为 1 票。此时服务器 4\n服从多数，更改选票信息为服务器 3，并更改状态为 FOLLOWING； （5）服务器 5 启动，同 4 一样当小弟。")])])]),e._v(" "),r("h2",{attrs:{id:"_3-2-stat结构体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-stat结构体"}},[e._v("#")]),e._v(" 3.2 Stat结构体")]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("四种类型的znode：")]),e._v(" "),r("p",[e._v("PERSISTENT-持久化目录节点      客户端与zookeeper断开连接后，该节点依旧存在"),r("br"),e._v("\nPERSISTENT_SEQUENTIAL-持久化顺序编号目录节点   客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号"),r("br"),e._v("\nEPHEMERAL-临时目录节点    客户端与zookeeper断开连接后，该节点被删除"),r("br"),e._v("\nEPHEMERAL_SEQUENTIAL-临时顺序编号目录节点    客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号")])]),e._v(" "),r("div",{staticClass:"custom-block danger"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),r("ol",[r("li",[e._v("czxid-创建节点的事务zxid\n每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。"),r("br"),e._v("\n事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。")]),e._v(" "),r("li",[e._v("ctime - znode被创建的毫秒数(从1970年开始)")]),e._v(" "),r("li",[e._v("mzxid - znode最后更新的事务zxid")]),e._v(" "),r("li",[e._v("mtime - znode最后修改的毫秒数(从1970年开始)")]),e._v(" "),r("li",[e._v("pZxid-znode最后更新的子节点zxid")]),e._v(" "),r("li",[e._v("cversion - znode子节点变化号，znode子节点修改次数")]),e._v(" "),r("li",[e._v("dataversion - znode数据变化号")]),e._v(" "),r("li",[e._v("aclVersion - znode访问控制列表的变化号")]),e._v(" "),r("li",[e._v("ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。")]),e._v(" "),r("li",[e._v("dataLength- znode的数据长度")]),e._v(" "),r("li",[e._v("numChildren - znode子节点数量")])])]),e._v(" "),r("h2",{attrs:{id:"_3-5-监听器原理-面试重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-监听器原理-面试重点"}},[e._v("#")]),e._v(" 3.5 监听器原理（面试重点）")]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"监听器原理（面试重点）",href:"../image/zookeeper12.jpg"}},[r("img",{attrs:{src:o(694),alt:"监听器原理（面试重点）"}})])]),e._v(" "),r("h2",{attrs:{id:"_3-4-写数据流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-写数据流程"}},[e._v("#")]),e._v(" 3.4 写数据流程")]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"写数据流程",href:"../image/zookeeper11.jpg"}},[r("img",{attrs:{src:o(695),alt:"写数据流程"}})])])])}),[],!1,null,null,null);t.default=a.exports}}]);