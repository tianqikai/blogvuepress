(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{1023:function(r,t,e){"use strict";e.r(t);var a=e(26),s=Object(a.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"_2-rocketmq基础介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-rocketmq基础介绍"}},[r._v("#")]),r._v(" 2. RocketMQ基础介绍")]),r._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_2-1-消息中间件作用"}},[r._v("2.1 消息中间件作用")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-1-1-应用解耦"}},[r._v("2.1.1 应用解耦")])]),a("li",[a("a",{attrs:{href:"#_2-1-2-流量削峰"}},[r._v("2.1.2 流量削峰")])]),a("li",[a("a",{attrs:{href:"#_2-1-3-数据分发"}},[r._v("2.1.3 数据分发")])])])]),a("li",[a("a",{attrs:{href:"#_2-2-rocketmq-的物理架构"}},[r._v("2.2 RocketMQ 的物理架构")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-2-1-nameserver"}},[r._v("2.2.1 NameServer")])]),a("li",[a("a",{attrs:{href:"#_2-2-2-生产者-producer"}},[r._v("2.2.2 生产者(Producer)")])]),a("li",[a("a",{attrs:{href:"#_2-2-3-消费者-consumer"}},[r._v("2.2.3 消费者(Consumer)")])]),a("li",[a("a",{attrs:{href:"#_2-2-4-消息-message"}},[r._v("2.2.4 消息(Message)")])]),a("li",[a("a",{attrs:{href:"#_2-2-5-主机-broker"}},[r._v("2.2.5 主机(Broker)")])]),a("li",[a("a",{attrs:{href:"#_2-2-2-物理架构中的整体运转"}},[r._v("2.2.2 物理架构中的整体运转")])])])])])]),a("p"),r._v(" "),a("p",[a("strong",[r._v("消息中间件(MQ)的定义")]),r._v("\n一般认为，消息中间件属于分布式系统中一个子系统，关注于数据的发送和接收，利用高效可靠的异步消息传递机制对分布式系统中的其余各个子系统进行集成。")]),r._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("strong",[r._v("高效")])]),r._v("：对于消息的处理处理速度快。"),a("br"),r._v(" "),a("font",{attrs:{color:"red"}},[a("strong",[r._v("可靠")])]),r._v("：一般消息中间件都会有消息持久化机制和其他的机制确保消息不丢失。"),a("br"),r._v(" "),a("font",{attrs:{color:"red"}},[a("strong",[r._v("异步")])]),r._v("：指发送完一个请求，不需要等待返回，随时可以再发送下一个请求，既不需要等待。")],1),r._v(" "),a("p",[a("strong",[r._v("一句话总结，我们消息中间件不生产消息，只是消息的搬运工")])]),r._v(" "),a("h2",{attrs:{id:"_2-1-消息中间件作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-消息中间件作用"}},[r._v("#")]),r._v(" 2.1 消息中间件作用")]),r._v(" "),a("h3",{attrs:{id:"_2-1-1-应用解耦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-应用解耦"}},[r._v("#")]),r._v(" 2.1.1 应用解耦")]),r._v(" "),a("p",[r._v("系统的耦合性越高，容错性就越低。以电商应用为例，用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障或者 因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 使用消息中间件，系统的耦合性就会提高了。比如物流系统发生故障，需要几分钟才能来修复，在这段时间内，物流系统要处理的数据被缓存到消息队列中，用户的下单操作正常完成。当物流系统恢复后，继续处理存放在消息队列中的订单消息即可，终端系统感知不到物流系统发生过几分钟故障。\n"),a("a",{attrs:{"data-fancybox":"",title:"RocketMQ",href:"./image/rocketmq21.jpg"}},[a("img",{attrs:{src:e(748),alt:"RocketMQ"}})])]),r._v(" "),a("h3",{attrs:{id:"_2-1-2-流量削峰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-流量削峰"}},[r._v("#")]),r._v(" 2.1.2 流量削峰")]),r._v(" "),a("p",[r._v("应用系统如果遇到系统请求流量的瞬间猛增，有可能会将系统压垮。有了消息队列可以将大量请求缓存起来，分散到很长一段时间处理，这样可以大大 提到系统的稳定性和用户体验。 互联网公司的大促场景（双十一、店庆活动、秒杀活动）都会使用到 MQ。\n"),a("a",{attrs:{"data-fancybox":"",title:"RocketMQ",href:"./image/rocketmq22.jpg"}},[a("img",{attrs:{src:e(749),alt:"RocketMQ"}})])]),r._v(" "),a("h3",{attrs:{id:"_2-1-3-数据分发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-数据分发"}},[r._v("#")]),r._v(" 2.1.3 数据分发")]),r._v(" "),a("p",[r._v("通过消息队列可以让数据在多个系统更加之间进行流通。数据的产生方不需要关心谁来使用数据，只需要将数据发送到消息队列，数据使用方直接在消 息队列中直接获取数据即可。 接口调用的弊端，无论是新增系统，还是移除系统，代码改造工作量都很大。 使用 MQ 做数据分发好处，无论是新增系统，还是移除系统，代码改造工作量较小。 所以使用 MQ 做数据的分发，可以提高团队开发的效率。\nRocketMQ 产品发展 RocketMQ 版本发")]),r._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"RocketMQ",href:"./image/rocketmq23.jpg"}},[a("img",{attrs:{src:e(750),alt:"RocketMQ"}})])]),r._v(" "),a("h2",{attrs:{id:"_2-2-rocketmq-的物理架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-rocketmq-的物理架构"}},[r._v("#")]),r._v(" 2.2 RocketMQ 的物理架构")]),r._v(" "),a("p",[r._v("消息队列 RocketMQ 是阿里巴巴集团基于高可用分布式集群技术，自主研发的云正式商用的专业消息中间件，既可为分布式应用系统提供异步解耦 和削峰填谷的能力，同时也具备互联网应用所需的海量消息堆积、高吞吐、可靠重试等特性，是阿里巴巴双 11 使用的核心产品。 RocketMQ 的设计"),a("font",{attrs:{color:"red"}},[a("strong",[r._v("基于主题的发布与订阅模式")])]),r._v("，其核心功能包括"),a("font",{attrs:{color:"red"}},[a("strong",[r._v("消息发送、消息存储(Broker)、消息消费")])]),r._v("，整体设计追求简单与性能第一。")],1),r._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"RocketMQ",href:"./image/rocketmq24.jpg"}},[a("img",{attrs:{src:e(751),alt:"RocketMQ"}})])]),r._v(" "),a("h3",{attrs:{id:"_2-2-1-nameserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-nameserver"}},[r._v("#")]),r._v(" 2.2.1 NameServer")]),r._v(" "),a("p",[r._v("NameServer 是整个 RocketMQ 的“大脑”，它是 RocketMQ 的服务注册中心,所以 RocketMQ 需要先启动 NameServer 再启动 Rocket 中的 Broker。")]),r._v(" "),a("p",[r._v("Broker 在启动时向所有 NameServer 注册（主要是服务器地址等），生产者在发送消息之前先从 NameServer 获取 Broker 服务器地址列表（消费者一 样），然后根据负载均衡算法从列表中选择一台服务器进行消息发送。")]),r._v(" "),a("p",[r._v("NameServer 与每台 Broker 服务保持长连接，并间隔 30S 检查 Broker 是否存活，如果检测到 Broker 宕机，则从路由注册表中将其移除。\n这样就可以实现 RocketMQ 的高可用。")]),r._v(" "),a("h3",{attrs:{id:"_2-2-2-生产者-producer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-生产者-producer"}},[r._v("#")]),r._v(" 2.2.2 生产者(Producer)")]),r._v(" "),a("p",[r._v("生产者：也称为消息发布者，负责生产并发送消息至 RocketMQ。")]),r._v(" "),a("h3",{attrs:{id:"_2-2-3-消费者-consumer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-消费者-consumer"}},[r._v("#")]),r._v(" 2.2.3 消费者(Consumer)")]),r._v(" "),a("p",[r._v("消费者：也称为消息订阅者，负责从 RocketMQ 接收并消费消息。")]),r._v(" "),a("h3",{attrs:{id:"_2-2-4-消息-message"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-消息-message"}},[r._v("#")]),r._v(" 2.2.4 消息(Message)")]),r._v(" "),a("p",[r._v("消息：生产或消费的数据，对于 RocketMQ 来说，消息就是字节数组。")]),r._v(" "),a("h3",{attrs:{id:"_2-2-5-主机-broker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-主机-broker"}},[r._v("#")]),r._v(" 2.2.5 主机(Broker)")]),r._v(" "),a("p",[r._v("RocketMQ 的核心，用于暂存和传输消息。")]),r._v(" "),a("h3",{attrs:{id:"_2-2-2-物理架构中的整体运转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-物理架构中的整体运转"}},[r._v("#")]),r._v(" 2.2.2 物理架构中的整体运转")]),r._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[r._v("物理架构中的整体运转")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("NameServer 先启动")])]),r._v(" "),a("li",[a("p",[r._v("Broker 启动时向 NameServer 注册")])]),r._v(" "),a("li",[a("p",[r._v("生产者在发送某个主题的消息之前先从 NamerServer 获取 Broker 服务器地址列表（有可能是集群），然后根据负载均衡算法从列表中选择一台 Broker 进行消息发送。")])]),r._v(" "),a("li",[a("p",[r._v("NameServer 与每台 Broker 服务器保持长连接，并间隔 30S 检测 Broker 是否存活，如果检测到 Broker 宕机（使用心跳机制，如果检测超过120S），则从路由注册表中将其移除。")])]),r._v(" "),a("li",[a("p",[r._v("消费者在订阅某个主题的消息之前从 NamerServer 获取 Broker 服务器地址列表（有可能是集群），但是消费者选择从 Broker 中订阅消息，订阅规则由 Broker 配置决定。")])])])])])}),[],!1,null,null,null);t.default=s.exports},748:function(r,t,e){r.exports=e.p+"assets/img/rocketmq21.7d39418d.jpg"},749:function(r,t,e){r.exports=e.p+"assets/img/rocketmq22.236cf804.jpg"},750:function(r,t,e){r.exports=e.p+"assets/img/rocketmq23.f46e3197.jpg"},751:function(r,t,e){r.exports=e.p+"assets/img/rocketmq24.b37e66c8.jpg"}}]);