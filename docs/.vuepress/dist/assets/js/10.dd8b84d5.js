(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{1027:function(s,t,a){s.exports=a.p+"assets/img/image-20201117202950336.45c1f080.png"},1028:function(s,t,a){s.exports=a.p+"assets/img/image-20201117203130867.ebb22fa3.png"},1029:function(s,t,a){s.exports=a.p+"assets/img/image-20201117203217016.4e661230.png"},1030:function(s,t,a){s.exports=a.p+"assets/img/image-20201117203245641.886c82db.png"},1031:function(s,t,a){s.exports=a.p+"assets/img/image-20201117204430836.14c223b4.png"},1032:function(s,t,a){s.exports=a.p+"assets/img/image-20201117204810350.65ca24ca.png"},1033:function(s,t,a){s.exports=a.p+"assets/img/image-20201117204912838.91d6c5fc.png"},1034:function(s,t,a){s.exports=a.p+"assets/img/image-20201117205635945.f3f013f6.png"},1035:function(s,t,a){s.exports=a.p+"assets/img/image-20201117205948374.05d707b2.png"},1036:function(s,t,a){s.exports=a.p+"assets/img/image-20201117210031725.14a1e5c9.png"},1037:function(s,t,a){s.exports=a.p+"assets/img/image-20201117210110343.a836fef5.png"},1038:function(s,t,a){s.exports=a.p+"assets/img/image-20201117210309069.dce36505.png"},1039:function(s,t,a){s.exports=a.p+"assets/img/image-20201117210611783.a64d4246.png"},1040:function(s,t,a){s.exports=a.p+"assets/img/image-20201117210722556.05af146a.png"},1041:function(s,t,a){s.exports=a.p+"assets/img/image-20201117210751068.19589b33.png"},1563:function(s,t,a){"use strict";a.r(t);var e=a(26),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"_8-k8s核心技术-其他控制器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-k8s核心技术-其他控制器"}},[s._v("#")]),s._v(" 8. K8s核心技术--其他控制器")]),s._v(" "),e("h2",{attrs:{id:"_8-1-statefulset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-statefulset"}},[s._v("#")]),s._v(" 8.1 Statefulset")]),s._v(" "),e("p",[s._v("Statefulset主要是用来部署有状态应用")]),s._v(" "),e("p",[s._v("对于StatefulSet中的Pod，每个Pod挂载自己独立的存储，如果一个Pod出现故障，从其他节点启动一个同样名字的Pod，要挂载上原来Pod的存储继续以它的状态提供服务。")]),s._v(" "),e("h3",{attrs:{id:"_8-1-1-无状态应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-1-无状态应用"}},[s._v("#")]),s._v(" 8.1.1 无状态应用")]),s._v(" "),e("p",[s._v("我们原来使用 deployment，部署的都是无状态的应用，那什么是无状态应用？")]),s._v(" "),e("ul",[e("li",[s._v("认为Pod都是一样的")]),s._v(" "),e("li",[s._v("没有顺序要求")]),s._v(" "),e("li",[s._v("不考虑应用在哪个node上运行")]),s._v(" "),e("li",[s._v("能够进行随意伸缩和扩展")])]),s._v(" "),e("h3",{attrs:{id:"_8-1-2-有状态应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-2-有状态应用"}},[s._v("#")]),s._v(" 8.1.2 有状态应用")]),s._v(" "),e("p",[s._v("上述的因素都需要考虑到")]),s._v(" "),e("ul",[e("li",[s._v("让每个Pod独立的")]),s._v(" "),e("li",[s._v("让每个Pod独立的，保持Pod启动顺序和唯一性")]),s._v(" "),e("li",[s._v("唯一的网络标识符，持久存储")]),s._v(" "),e("li",[s._v("有序，比如mysql中的主从")])]),s._v(" "),e("p",[s._v("适合StatefulSet的业务包括数据库服务MySQL 和 PostgreSQL，集群化管理服务Zookeeper、etcd等有状态服务")]),s._v(" "),e("p",[s._v("StatefulSet的另一种典型应用场景是作为一种比普通容器更稳定可靠的模拟虚拟机的机制。传统的虚拟机正是一种有状态的宠物，运维人员需要不断地维护它，容器刚开始流行时，我们用容器来模拟虚拟机使用，所有状态都保存在容器里，而这已被证明是非常不安全、不可靠的。")]),s._v(" "),e("p",[s._v("使用StatefulSet，Pod仍然可以通过漂移到不同节点提供高可用，而存储也可以通过外挂的存储来提供\n高可靠性，StatefulSet做的只是将确定的Pod与确定的存储关联起来保证状态的连续性。")]),s._v(" "),e("h3",{attrs:{id:"部署有状态应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署有状态应用"}},[s._v("#")]),s._v(" 部署有状态应用")]),s._v(" "),e("p",[s._v("无头service， ClusterIp：none")]),s._v(" "),e("p",[s._v("这里就需要使用 StatefulSet部署有状态应用")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1027),alt:"image-20201117202950336"}})]),s._v(" "),e("p",[e("img",{attrs:{src:a(1028),alt:"image-20201117203130867"}})]),s._v(" "),e("p",[s._v("然后通过查看pod，能否发现每个pod都有唯一的名称")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1029),alt:"image-20201117203217016"}})]),s._v(" "),e("p",[s._v("然后我们在查看service，发现是无头的service")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1030),alt:"image-20201117203245641"}})]),s._v(" "),e("p",[s._v("这里有状态的约定，肯定不是简简单单通过名称来进行约定，而是更加复杂的操作")]),s._v(" "),e("ul",[e("li",[s._v("deployment：是有身份的，有唯一标识")]),s._v(" "),e("li",[s._v("statefulset：根据主机名 + 按照一定规则生成域名")])]),s._v(" "),e("p",[s._v("每个pod有唯一的主机名，并且有唯一的域名")]),s._v(" "),e("ul",[e("li",[s._v("格式：主机名称.service名称.名称空间.svc.cluster.local")]),s._v(" "),e("li",[s._v("举例：nginx-statefulset-0.default.svc.cluster.local")])]),s._v(" "),e("h2",{attrs:{id:"daemonset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#daemonset"}},[s._v("#")]),s._v(" DaemonSet")]),s._v(" "),e("p",[s._v("DaemonSet 即后台支撑型服务，主要是用来部署守护进程")]),s._v(" "),e("p",[s._v("长期伺服型和批处理型的核心在业务应用，可能有些节点运行多个同类业务的Pod，有些节点上又没有这类的Pod运行；而后台支撑型服务的核心关注点在K8S集群中的节点(物理机或虚拟机)，要保证每个节点上都有一个此类Pod运行。节点可能是所有集群节点，也可能是通过 nodeSelector选定的一些特定节点。典型的后台支撑型服务包括：存储、日志和监控等。在每个节点上支撑K8S集群运行的服务。")]),s._v(" "),e("p",[s._v("守护进程在我们每个节点上，运行的是同一个pod，新加入的节点也同样运行在同一个pod里面")]),s._v(" "),e("ul",[e("li",[s._v("例子：在每个node节点安装数据采集工具")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(1031),alt:"image-20201117204430836"}})]),s._v(" "),e("p",[s._v("这里是不是一个FileBeat镜像，主要是为了做日志采集工作")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1032),alt:"image-20201117204810350"}})]),s._v(" "),e("p",[s._v("进入某个 Pod里面，进入")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it ds-test-cbk6v "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("通过该命令后，我们就能看到我们内部收集的日志信息了")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1033),alt:"image-20201117204912838"}})]),s._v(" "),e("h2",{attrs:{id:"job和cronjob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#job和cronjob"}},[s._v("#")]),s._v(" Job和CronJob")]),s._v(" "),e("p",[s._v("一次性任务 和 定时任务")]),s._v(" "),e("ul",[e("li",[s._v("一次性任务：一次性执行完就结束")]),s._v(" "),e("li",[s._v("定时任务：周期性执行")])]),s._v(" "),e("p",[s._v("Job是K8S中用来控制批处理型任务的API对象。批处理业务与长期伺服业务的主要区别就是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出了。成功完成的标志根据不同的 spec.completions 策略而不同：单Pod型任务有一个Pod成功就标志完成；定数成功行任务保证有N个任务全部成功；工作队列性任务根据应用确定的全局成功而标志成功。")]),s._v(" "),e("h3",{attrs:{id:"job"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#job"}},[s._v("#")]),s._v(" Job")]),s._v(" "),e("p",[s._v("Job也即一次性任务")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1034),alt:"image-20201117205635945"}})]),s._v(" "),e("p",[s._v("使用下面命令，能够看到目前已经存在的Job")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl get "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:a(1035),alt:"image-20201117205948374"}})]),s._v(" "),e("p",[s._v("在计算完成后，通过命令查看，能够发现该任务已经完成")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1036),alt:"image-20201117210031725"}})]),s._v(" "),e("p",[s._v("我们可以通过查看日志，查看到一次性任务的结果")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl logs pi-qpqff\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:a(1037),alt:"image-20201117210110343"}})]),s._v(" "),e("h3",{attrs:{id:"cronjob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cronjob"}},[s._v("#")]),s._v(" CronJob")]),s._v(" "),e("p",[s._v("定时任务，cronjob.yaml如下所示")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1038),alt:"image-20201117210309069"}})]),s._v(" "),e("p",[s._v("这里面的命令就是每个一段时间，这里是通过 cron 表达式配置的，通过 schedule字段")]),s._v(" "),e("p",[s._v("然后下面命令就是每个一段时间输出")]),s._v(" "),e("p",[s._v("我们首先用上述的配置文件，创建一个定时任务")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl apply -f cronjob.yaml\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("创建完成后，我们就可以通过下面命令查看定时任务")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl get cronjobs\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:a(1039),alt:"image-20201117210611783"}})]),s._v(" "),e("p",[s._v("我们可以通过日志进行查看")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl logs hello-1599100140-wkn79\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:a(1040),alt:"image-20201117210722556"}})]),s._v(" "),e("p",[s._v("然后每次执行，就会多出一个 pod")]),s._v(" "),e("p",[e("img",{attrs:{src:a(1041),alt:"image-20201117210751068"}})]),s._v(" "),e("h2",{attrs:{id:"删除svc-和-statefulset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除svc-和-statefulset"}},[s._v("#")]),s._v(" 删除svc 和 statefulset")]),s._v(" "),e("p",[s._v("使用下面命令，可以删除我们添加的svc 和 statefulset")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("kubectl delete svc web\n\nkubectl delete statefulset --all\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"replication-controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replication-controller"}},[s._v("#")]),s._v(" Replication Controller")]),s._v(" "),e("p",[s._v("Replication Controller 简称 "),e("strong",[s._v("RC")]),s._v("，是K8S中的复制控制器。RC是K8S集群中最早的保证Pod高可用的API对象。通过监控运行中的Pod来保证集群中运行指定数目的Pod副本。指定的数目可以是多个也可以是1个；少于指定数目，RC就会启动新的Pod副本；多于指定数目，RC就会杀死多余的Pod副本。")]),s._v(" "),e("p",[s._v("即使在指定数目为1的情况下，通过RC运行Pod也比直接运行Pod更明智，因为RC也可以发挥它高可用的能力，保证永远有一个Pod在运行。RC是K8S中较早期的技术概念，只适用于长期伺服型的业务类型，比如控制Pod提供高可用的Web服务。")]),s._v(" "),e("h3",{attrs:{id:"replica-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replica-set"}},[s._v("#")]),s._v(" Replica Set")]),s._v(" "),e("p",[s._v("Replica Set 检查 RS，也就是副本集。RS是新一代的RC，提供同样高可用能力，区别主要在于RS后来居上，能够支持更多种类的匹配模式。副本集对象一般不单独使用，而是作为Deployment的理想状态参数来使用")])])}),[],!1,null,null,null);t.default=r.exports}}]);