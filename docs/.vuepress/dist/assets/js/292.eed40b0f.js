(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{1651:function(s,t,a){"use strict";a.r(t);var n=a(26),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_1-java基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-java基础"}},[s._v("#")]),s._v(" 1. JAVA基础")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-1-不改变对象地址-修改其值"}},[s._v("1.1 不改变对象地址，修改其值")])]),a("li",[a("a",{attrs:{href:"#_1-2-string值比较"}},[s._v("1.2 String值比较")])]),a("li",[a("a",{attrs:{href:"#_1-3-包装类"}},[s._v("1.3 包装类")])]),a("li",[a("a",{attrs:{href:"#_1-4-string-stringbuffer-stringbuilder的区别"}},[s._v("1.4 String/StringBuffer/StringBuilder的区别")])]),a("li",[a("a",{attrs:{href:"#_1-5-arraylist和linkedlist有哪些区别"}},[s._v("1.5 ArrayList和LinkedList有哪些区别")])]),a("li",[a("a",{attrs:{href:"#_1-6-copyonwritearraylist的底层原理是怎样的"}},[s._v("1.6 CopyOnWriteArrayList的底层原理是怎样的")])]),a("li",[a("a",{attrs:{href:"#_1-7-hashmap的扩容机制原理"}},[s._v("1.7 HashMap的扩容机制原理")])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"_1-1-不改变对象地址-修改其值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-不改变对象地址-修改其值"}},[s._v("#")]),s._v(" 1.1 不改变对象地址，修改其值")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在这中间可以添加N⾏代码， 但必须保证s引⽤的指向不变， 最终将输出变成abcd")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("答案：采用反射方式")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @author tianqikai\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NoSuchFieldException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IllegalAccessException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" abc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Field")]),s._v(" declaredField "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getDeclaredField")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        declaredField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAccessible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        declaredField"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toCharArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"_1-2-string值比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-string值比较"}},[s._v("#")]),s._v(" 1.2 String值比较")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s1 == s2?")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s2 == s3?")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("blockquote",[a("p",[s._v("答案：")]),s._v(" "),a("ol",[a("li",[s._v("s1 == s2为false")]),s._v(" "),a("li",[s._v("s2 == s3为true")])]),s._v(" "),a("p",[s._v('String对象的intern⽅法， ⾸先会检查字符串常量池中是否存在"abc"， 如果存在则返回该字符串引⽤， 如果不存在， 则把"abc"添加到字符串常量池中， 并返回该字符串常量的引⽤ 。')])]),s._v(" "),a("h2",{attrs:{id:"_1-3-包装类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-包装类"}},[s._v("#")]),s._v(" 1.3 包装类")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i1 == i2?")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" i4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i3 == i4?")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("blockquote",[a("p",[s._v("答案：")]),s._v(" "),a("ol",[a("li",[s._v("i1 == i2为true")]),s._v(" "),a("li",[s._v("i3 == i4为false")])]),s._v(" "),a("p",[s._v("在Interger类中， 存在⼀个静态内部类IntegerCache， 该类中存在⼀个Integer cache[]， 并且存在⼀    个static块， 会在加载类的时候执⾏， 会将-128⾄127这些数字提前⽣成Integer对象， 并缓存在cache数 组中， 当我们在定义Integer数字时， 会调⽤Integer的valueOf⽅法， valueOf⽅法会判断所定义的数字   是否在-128⾄127之间， 如果存在则直接从cache数组中获取Integer对象， 如果超过， 则⽣成⼀个新的  Integer对象。")])]),s._v(" "),a("h2",{attrs:{id:"_1-4-string-stringbuffer-stringbuilder的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-string-stringbuffer-stringbuilder的区别"}},[s._v("#")]),s._v(" 1.4 String/StringBuffer/StringBuilder的区别")]),s._v(" "),a("ol",[a("li",[s._v("String是不可变的， 如果尝试去修改， 会新⽣成⼀个字符串对象， StringBuffer和StringBuilder是可变的")]),s._v(" "),a("li",[s._v("StringBuffer是线程安全的， StringBuilder是线程不安全的， 所以在单线程环境下StringBuilder效率会更⾼")])]),s._v(" "),a("h2",{attrs:{id:"_1-5-arraylist和linkedlist有哪些区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-arraylist和linkedlist有哪些区别"}},[s._v("#")]),s._v(" 1.5 ArrayList和LinkedList有哪些区别")]),s._v(" "),a("ol",[a("li",[s._v("⾸先，他们的底层数据结构不同， ArrayList底层是基于"),a("code",[s._v("数组")]),s._v("实现的， LinkedList底层是基于"),a("code",[s._v("链表")]),s._v("实现的")]),s._v(" "),a("li",[s._v("由于底层数据结构不同， 他们所适⽤的场景也不同， ArrayList更适合随机查找， LinkedList更适合 删除和添加， 查询 、添加、删除的时间复杂度不同")]),s._v(" "),a("li",[s._v("另外ArrayList和LinkedList都实现了List接⼝， 但是LinkedList还额外实现了Deque接⼝， 所以 LinkedList还可以当做队列来使⽤")])]),s._v(" "),a("h2",{attrs:{id:"_1-6-copyonwritearraylist的底层原理是怎样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-copyonwritearraylist的底层原理是怎样的"}},[s._v("#")]),s._v(" 1.6 CopyOnWriteArrayList的底层原理是怎样的")]),s._v(" "),a("ol",[a("li",[s._v("⾸先CopyOnWriteArrayList内部也是⽤过数组来实现的， 在向CopyOnWriteArrayList添加元素 时， 会复制⼀个新的数组， 写操作在新数组上进⾏， 读操作在原数组上进⾏")]),s._v(" "),a("li",[s._v("并且， 写操作会加锁， 防⽌出现并发写⼊丢失数据的问题")]),s._v(" "),a("li",[s._v("写操作结束之后会把原数组指向新数组")]),s._v(" "),a("li",[s._v("CopyOnWriteArrayList允许在写操作时来读取数据， ⼤⼤提⾼了读的性能， 因此适合读多写少的应 ⽤场景， 但是CopyOnWriteArrayList会⽐较占内存， 同时可能读到的数据不是实时最新的数据， 所 以不适合实时性要求很⾼的场景")])]),s._v(" "),a("h2",{attrs:{id:"_1-7-hashmap的扩容机制原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-hashmap的扩容机制原理"}},[s._v("#")]),s._v(" 1.7 HashMap的扩容机制原理")]),s._v(" "),a("ul",[a("li",[s._v("1.7版本")])]),s._v(" "),a("ol",[a("li",[s._v("先⽣成新数组")]),s._v(" "),a("li",[s._v("遍历⽼数组中的每个位置上的链表上的每个元素")]),s._v(" "),a("li",[s._v("取每个元素的key， 并基于新数组⻓度， 计算出每个元素在新数组中的下标")]),s._v(" "),a("li",[s._v("将元素添加到新数组中去")]),s._v(" "),a("li",[s._v("所有元素转移完了之后， 将新数组赋值给HashMap对象的table属性")])]),s._v(" "),a("ul",[a("li",[s._v("1.8版本")])]),s._v(" "),a("ol",[a("li",[s._v("先⽣成新数组")]),s._v(" "),a("li",[s._v("遍历⽼数组中的每个位置上的链表或红⿊树")]),s._v(" "),a("li",[s._v("如果是链表， 则直接将链表中的每个元素重新计算下标， 并添加到新数组中去")]),s._v(" "),a("li",[s._v("如果是红⿊树， 则先遍历红⿊树， 先计算出红⿊树中每个元素对应在新数组中的下标位置")])]),s._v(" "),a("ul",[a("li",[s._v("a. 统计每个下标位置的元素个数")]),s._v(" "),a("li",[s._v("b. 如果该位置下的元素个数超过了8， 则⽣成⼀个新的红⿊树， 并将根节点的添加到新数组的对 应位置")]),s._v(" "),a("li",[s._v("c. 如果该位置下的元素个数没有超过8， 那么则⽣成⼀个链表， 并将链表的头节点添加到新数组 的对应位置")])]),s._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[s._v("所有元素转移完了之后， 将新数组赋值给HashMap对象的table属性")])])])}),[],!1,null,null,null);t.default=r.exports}}]);