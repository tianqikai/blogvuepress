(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{540:function(a,t,v){a.exports=v.p+"assets/img/JVM.4469d9be.jpg"},541:function(a,t,v){a.exports=v.p+"assets/img/javarun.1e5323db.png"},542:function(a,t,v){a.exports=v.p+"assets/img/jvm$jre$jdk.322652f5.jpg"},543:function(a,t,v){a.exports=v.p+"assets/img/Java8.0_platform.98b3ff4c.jpg"},544:function(a,t,v){a.exports=v.p+"assets/img/javahome.bb5b9a00.jpg"},545:function(a,t,v){a.exports=v.p+"assets/img/javahome2.ed4ddaaa.jpg"},546:function(a,t,v){a.exports=v.p+"assets/img/JVM2.986219dc.jpg"},756:function(a,t,v){"use strict";v.r(t);var s=v(26),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"_1-java概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-java概述"}},[a._v("#")]),a._v(" 1.java概述")]),a._v(" "),s("h2",{attrs:{id:"_1-1-java语言诞生"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java语言诞生"}},[a._v("#")]),a._v(" 1.1 java语言诞生")]),a._v(" "),s("ul",[s("li",[a._v("是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言。")]),a._v(" "),s("li",[a._v("是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使\n    用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。")]),a._v(" "),s("li",[a._v(" 随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。")])]),a._v(" "),s("p",[a._v("java之父James Gosling团队在开发“Green”项目时，发现C缺少垃圾回收系统，还有可移植系统的安全性。分布程序设计和多线程功能。最后，他们想要一种易于一直到各种设备上的平台。")]),a._v(" "),s("p",[a._v("Java确实是从c语言和c++语言继承了许多成分，甚至可以将Java看成是"),s("font",{attrs:{clolor:"red",weight:"bold"}},[a._v("类C语言")]),a._v("发展和衍生的产物。比如Java语言的变量声明，操作符形式，参数传递，流程控制等方面和c语言、c++完全相同。但同时，Java是一种"),s("font",{attrs:{color:"red",weight:"bold"}},[a._v("纯粹的面向对象的程序设计语言")]),a._v("，他继承了c++面向对象的的核心。\njava"),s("font",{attrs:{color:"blue"}},[a._v("舍弃了c语言中容易引起错误的指针")]),a._v("（以引用取代）、运算符重载（operator overloading）、多重继承（以接口取代）等特性，"),s("font",{attrs:{color:"blue"}},[a._v("增加了垃圾回收器功能")]),a._v("用于回收不再被引用的对象所占据的内存空间。JDK1.5又引入了泛型编程（GenericProgramming）、类型安全的枚举、不定长参数和自动装箱/拆箱")],1),a._v(" "),s("h2",{attrs:{id:"_1-2-java语言简史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java语言简史"}},[a._v("#")]),a._v(" 1.2 java语言简史")]),a._v(" "),s("ul",[s("li",[a._v("1991年 Green项目，开发语言最初命名为Oak（橡树）")]),a._v(" "),s("li",[a._v("1994年，开发组意识到Oak非常适合于互联网")]),a._v(" "),s("li",[a._v("1996年，发布JDK1.0，约8.3万个网页应用java技术来制作")]),a._v(" "),s("li",[a._v("1997年，发布JDK1.1，javaone会议召开，创当时全球同类型会议规模之最")]),a._v(" "),s("li",[a._v("1998年，发布JDK1.2，同年发布企业平台J2EE")]),a._v(" "),s("li",[a._v("1999年，Java分成J2SE，J2EE和J2ME，JSP/Servlet技术诞生")]),a._v(" "),s("li",[s("font",{attrs:{color:"red"}},[a._v("2004年，发布里程碑版本：JDK1.5，为突出此版本的重要性，更名为JDK5.0")])],1),a._v(" "),s("li",[a._v("2005年，J2SE->JavaSE,J2EE->JavaEE,J2ME->JavaME")]),a._v(" "),s("li",[a._v("2009年，Oracle公司收购SUN，交易价格74亿美元")]),a._v(" "),s("li",[a._v("2011年，发布JDK7.0")]),a._v(" "),s("li",[s("font",{attrs:{color:"red"}},[a._v("2014年，发布JDK8.0，是继JDK5.0以来变化最大的版本")])],1),a._v(" "),s("li",[a._v("2017年，发布JDK9.0，最大限度实现模块化")]),a._v(" "),s("li",[a._v("2018年3月，发布JDK10.0，版本号也称为18.3")]),a._v(" "),s("li",[a._v("2018年9月，发布JDK11.0，版本号也称为18.9")])]),a._v(" "),s("h2",{attrs:{id:"_1-3-java技术体系平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-java技术体系平台"}},[a._v("#")]),a._v(" 1.3 Java技术体系平台")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3",face:"黑体"}},[s("strong",[a._v("Java SE(Java Standard Edition)标准版")])])],1),a._v(" "),s("p",[a._v("支持面向桌面级应用（如windows 下的应用程序）的Java平台开发，提供了完整的Java核心API，此版本之前称为J2SE")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3",face:"黑体"}},[s("strong",[a._v("Java EE(Java Enterprise Edition)企业版")])])],1),a._v(" "),s("p",[a._v("是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如：Servlet,jsp等等，主要针对于Web应用程序开发。版本之前称为J2EE")]),a._v(" "),s("p",[s("font",{attrs:{size:"3",face:"黑体"}},[s("strong",[a._v("Java ME(Java Micro Edition)小型版")])])],1),a._v(" "),s("p",[a._v("支持Java程序运行在移动终端（手机，PDA）上的平台，对Java API有所精简，并加入了针对移动终端的支持，此版本以前称为J2ME")]),a._v(" "),s("p",[s("font",{attrs:{size:"3",face:"黑体"}},[s("strong",[a._v("Java Card")])])],1),a._v(" "),s("p",[a._v("支持一些Java小程序（Applets）运行在小内存设备（如智能卡）上的平台")]),a._v(" "),s("p",[s("a",{attrs:{href:""}},[a._v("Java SE和Java EE区别理解")])]),a._v(" "),s("h2",{attrs:{id:"_1-4java技术在各领域的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4java技术在各领域的应用"}},[a._v("#")]),a._v(" 1.4Java技术在各领域的应用")]),a._v(" "),s("p",[a._v("按Java的应用领域来分，主要表现在以下几个方面：")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[a._v("● 企业级应用：")])],1),a._v(" "),s("p",[a._v("主要指复杂的大企业的软件系统、各种类型的网站。Java的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包含金融、电信、交通、电子商务等。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[a._v("● Android平台应用：")])],1),a._v(" "),s("p",[a._v("Android应用程序使用的Java语言编写。AndRoid开发水平的高低很大程度上取决于Java语言核心能力是否扎实。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[a._v("● 大数据平台开发：")])],1),a._v(" "),s("p",[a._v("各类框架有Haddoop，spark，storm，flink等，就这类技术生态圈来讲，还有各种中间件如flume，kafka，sqoop等等，这些框架以及工具大多数是用Java编写而成。")]),a._v(" "),s("h2",{attrs:{id:"_1-5-java语言的主要特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-java语言的主要特性"}},[a._v("#")]),a._v(" 1.5 Java语言的主要特性")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是易学的")])])],1),a._v(" "),s("p",[a._v("Java语言的语法与C语言、c++的语法很相近。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是强制面向对象的")])])],1),a._v(" "),s("p",[a._v("Java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，但支持接口的之间的多继承，并支持类与接口之间的实现机制（关键字 implements）")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是分布式的")])])],1),a._v(" "),s("p",[a._v("Java语言支持Intternet应用开发，在基本的的java应用编程接口中有一个网络应用编程接口（java.net）,他提供了用于网络编程的类库，包含URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是健壮的")])])],1),a._v(" "),s("p",[a._v("Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是安全的")])])],1),a._v(" "),s("p",[a._v("Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。"),s("font",{attrs:{color:"red"}},[a._v(" 如：安全防范机制（类ClassLoader）")]),a._v(",然后可以在实现java平台的任何系统中运行")],1),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是体系结构中立的")])])],1),a._v(" "),s("p",[a._v("Java程序 （后缀为Java的文件） 在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是解释型语言")])])],1),a._v(" "),s("p",[a._v("如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统的解释器中运行。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java是性能略高的")])])],1),a._v(" "),s("p",[a._v("与那些解释型的高级脚本语言相比，Java的性能还是较优的。")]),a._v(" "),s("p",[s("font",{attrs:{color:"red",size:"3"}},[s("strong",[a._v("● Java语言是原生支持多线程的")])])],1),a._v(" "),s("p",[a._v("Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。")]),a._v(" "),s("h2",{attrs:{id:"_1-4-java语言运行机制及运行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-java语言运行机制及运行过程"}},[a._v("#")]),a._v(" 1.4 Java语言运行机制及运行过程")]),a._v(" "),s("h3",{attrs:{id:"●-java语言的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#●-java语言的特点"}},[a._v("#")]),a._v(" ● Java语言的特点")]),a._v(" "),s("h4",{attrs:{id:"●-面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#●-面向对象"}},[a._v("#")]),a._v(" ● 面向对象")]),a._v(" "),s("p",[a._v("两个基本概念：类、对象")]),a._v(" "),s("p",[a._v("三个特性： 封装、继承、多态")]),a._v(" "),s("h4",{attrs:{id:"●-健壮性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#●-健壮性"}},[a._v("#")]),a._v(" ● 健壮性")]),a._v(" "),s("p",[a._v("吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制")]),a._v(" "),s("p",[a._v("####● 跨平台性\n"),s("strong",[a._v("跨平台性")]),a._v("："),s("em",[a._v("通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write  once，Run AnyWhere” 一次编译，到处运行。")]),a._v("\n原理：只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机（JVM Java Virtual Machine）即可。由JVM来负责Java程序在该系统中运行。")]),a._v(" "),s("h3",{attrs:{id:"●-java两种核心机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#●-java两种核心机制"}},[a._v("#")]),a._v(" ● Java两种核心机制")]),a._v(" "),s("br"),a._v(" "),s("font",{attrs:{color:"red"}},[s("strong",[a._v("■ Java虚拟机（Java Virtal Machine)")]),a._v(" "),s("br"),a._v(" "),s("strong",[a._v("\n      ■ 垃圾收集机制（Garbage Collection）\n    ")])]),a._v(" "),s("hr"),a._v(" "),s("br"),a._v(" "),s("font",{attrs:{color:"blue"}},[s("strong",[a._v("\n      核心机制-JVM是一个虚拟的计算机,\n    ")]),a._v("\n    具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。\n  ")]),a._v(" "),s("ul",[s("li",[a._v("对于不同的平台，有不同的虚拟机.")]),a._v(" "),s("li",[a._v("只有某平台提供了对应的Java虚拟机，java程序才可以再次平台运行")]),a._v(" "),s("li",[a._v("Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”")])]),a._v(" "),s("p",[s("img",{attrs:{src:v(540),alt:"Alt text"}})]),a._v(" "),s("p",[s("strong",[a._v("因为有了JVM，同一个Java 程序在三个不同的操作系统中都可以执行。这\n样就实现了Java 程序的跨平台性。")])]),a._v(" "),s("p",[s("img",{attrs:{src:v(541),alt:"Alt text"}})]),a._v(" "),s("p",[a._v("JVM: jvm有自己完善的硬件架构，如处理器、堆栈（stack）、寄存器等，还具有相应的指令系统（java字节码就是一种指令格式）。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需要生成在Java虚拟机上运行的字节码（目标代码 .class文件），就可以在多种平台上不加修改的运行。JVM是Java平台无关的基础。")]),a._v(" "),s("p",[a._v("JVM负责运行字节码：JVM把每一条要执行的字节码交给jvm解释器，翻译成对应的机器码，然后由解释器执行。")]),a._v(" "),s("p",[s("strong",[a._v("JVM解释执行字节码文件就是JVM操作JAVA解释器进行翻译执行字节码文件的过程；")])]),a._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[a._v("JAVA编译器：")])]),s("br"),a._v("\n将java源文件（.java文件）编译成字节码文件（.class文件，是特殊的二进制文件，二进制字节码文件），这种class字节码就是JVM的“机器语言”。\n"),s("em",[s("strong",[a._v("javac.exe")])]),a._v(" 可以简单看成是JAVA编译器"),s("br"),a._v(" "),s("font",{attrs:{color:"red"}},[s("strong",[a._v("JAVA解释器：")])]),s("br"),a._v("\n是JVM的一部分。Java编译器用来解释执行Java编译器后的程序。"),s("em",[s("strong",[a._v("java.exe")])]),a._v(" 可以简单的看成是Java的解释器")],1),a._v(" "),s("p",[s("strong",[a._v("解释器：")]),a._v(" 是一种电脑程序，能够把高级的编程语言一行一行直接翻译运行。解释器不会一次把整个程序翻译出来，只是像是一个中间人，每次运行程序时都要先转成另一种语言再进行运行，因此通过解释器运行的程序速度比较缓慢。它每次翻译一行程序叙述就立刻运行，然后再翻译下一行，再运行，如此不停地进行下去。JAVA中它会先将源码翻译程另一种语言class文件，以供多次运行而无需再进行编译。其无需依赖编译器而运行，直接有解释器翻译成机器字节码，直接运行，速度相对较快。")]),a._v(" "),s("p",[s("strong",[a._v("即时编译(Just-in-time compilation: JIT)：")]),a._v(" 又叫实时编译、及时编译。是指一种在运行时期把字节码编译成原生机器码的技术，一句一句翻译源代码，但是会将翻译过的代码缓存起来以降低性能耗损。这项技术是被用来改善虚拟机的性能的。")]),a._v(" "),s("p",[s("strong",[a._v("JIT编译器是JRE的一部分。")]),a._v(" 原本的Java程序都是要经过解释执行的，其执行速度肯定比可执行的二进制字节码程序慢。为了提高执行速度，引入了JIT。在运行时，JIT会把翻译过来的机器码保存起来，以备下次使用。而如果JIT对每条字节码都进行编译，则会负担过重，所以，JIT只会对经常执行的字节码进行编译，如循环，高频度使用的方法等。它会以整个方法为单位，一次性将整个方法的字节码编译为本地机器码，然后直接运行编译后的机器码。")]),a._v(" "),s("font",{attrs:{color:"blue"}},[s("strong",[a._v("\n      核心机制-垃圾回收,\n    ")])]),a._v(" "),s("ul",[s("li",[a._v("不再使用的内存空间应回收--垃圾回收\n      "),s("br"),a._v("\n      1. 在c/c++等语言中，有程序员负责回收无用内存\n      "),s("br"),a._v("\n      2. Java 语言消除了程序员回收无用内存的空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些课释放的存储空间。\n    ")]),a._v(" "),s("li",[s("font",{attrs:{color:"red"}},[a._v("垃圾回收在Java程序运行过程中自动运行，程序员无法精确控制和干预")])],1)]),a._v(" "),s("h2",{attrs:{id:"_1-5-jvm-jre-jdk关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-jvm-jre-jdk关系"}},[a._v("#")]),a._v(" 1.5 JVM JRE JDK关系")]),a._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[a._v("JDK(Java Development Kit Java开发工具包)")])]),s("br"),a._v("\nJDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了\nJRE。所以安装了JDK，就不用在单独安装JRE了。\n◆其中的开发工具："),s("strong",[a._v("编译工具(javac.exe) 打包工具(jar.exe)等")]),a._v(" "),s("font",{attrs:{color:"red"}},[s("strong",[a._v("JRE(Java Runtime Environment Java运行环境)")])]),s("br"),a._v("\n包括"),s("strong",[a._v("Java虚拟机(JVM Java Virtual Machine)"),s("strong",[a._v("和")]),a._v("Java程序所需的核心类库")]),a._v("等，\n如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。")],1),a._v(" "),s("p",[s("img",{attrs:{src:v(542),alt:"Alt text"}})]),a._v(" "),s("p",[s("strong",[a._v("• JDK = JRE + 开发工具集（例如Javac编译工具等）")]),s("br"),a._v(" "),s("strong",[a._v("• JRE = JVM + Java SE标准类库")])]),a._v(" "),s("hr"),a._v(" "),s("p",[s("img",{attrs:{src:v(543),alt:"Alt text"}})]),a._v(" "),s("p",[s("strong",[a._v("参考文献")]),s("br"),a._v(" "),s("a",{attrs:{href:"https://www.cnblogs.com/roger-yu/p/5827452.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/roger-yu/p/5827452.html"),s("OutboundLink")],1),a._v(" "),s("a",{attrs:{href:"https://www.cnblogs.com/chengdabelief/p/6576320.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/chengdabelief/p/6576320.html"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"_1-6-java语言的环境搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-java语言的环境搭建"}},[a._v("#")]),a._v(" 1.6 Java语言的环境搭建")]),a._v(" "),s("h3",{attrs:{id:"配置java开发环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置java开发环境"}},[a._v("#")]),a._v(" 配置JAVA开发环境")]),a._v(" "),s("p",[s("font",{attrs:{color:"red"}},[s("strong",[a._v("配置环境变量 path")])]),s("br"),a._v("\n每次执行 java 的工具都要进入到bin目录下，是非常麻烦的。可不可以在任何目\n录下都可以执行java的工具呢？"),s("br"),a._v("\n※根据windows系统在查找可执行程序的原理，可以将java工具所在路径定义到\npath 环境变量中，让系统帮我们去找运行执行的程序。"),s("br"),a._v("\n※配置方法："),s("br"),a._v("\n◆我的电脑--属性--高级系统设置--环境变量"),s("br"),a._v("\n◆编辑 path 环境变量，在变量值开始处加上java工具所在目录，后面用 “ ; ”和其他值分隔\n开即可。"),s("br"),a._v("\n◆打开DOS命令行，任意目录下敲入javac。如果出现javac 的参数信息，配置成功。")],1),a._v(" "),s("p",[s("em",[s("strong",[a._v("注： 具体操作流程，参看JDK8下载_安装_配置.doc")])]),a._v(" "),s("img",{attrs:{src:v(544),alt:"Alt text"}}),a._v(" "),s("img",{attrs:{src:v(545),alt:"Alt text"}})]),a._v(" "),s("h3",{attrs:{id:"体验java开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#体验java开发"}},[a._v("#")]),a._v(" 体验JAVA开发")]),a._v(" "),s("p",[a._v("●步骤：")]),a._v(" "),s("ol",[s("li",[a._v("将 Java 代码编写到扩展名为 .java 的文件中。")]),a._v(" "),s("li",[a._v("通过 javac 命令对该 java 文件进行编译。")]),a._v(" "),s("li",[a._v("通过 java 命令对生成的 class 文件进行运行。")])]),a._v(" "),s("p",[s("img",{attrs:{src:v(546),alt:"Alt text"}})]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorld")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("“"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hello")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("World")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## 编译")]),a._v("\n  javac HelloWorld.java\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## 运行")]),a._v("\n  java HelloWorld\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h2",{attrs:{id:"面试题-谈谈你对java平台的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题-谈谈你对java平台的理解"}},[a._v("#")]),a._v(" 面试题 谈谈你对Java平台的理解")]),a._v(" "),s("font",{attrs:{color:"red"}},[a._v("\nJava语言是一种面向对象的高性能解释性语言，具有简单易学，易跨平台的特点。"),s("br"),a._v(" "),s("strong",[a._v("一处编译，到处运行（Write once,run Anywhere）")]),a._v("（不同的操作系统，只需要安装不同的JRE就能运行同一套代码）。"),s("br"),a._v("\nJava语言摒弃了C语言的指针等晦涩难懂的内存管理机制，程序员大部分情况下不用特别关注内存管理，java通过垃圾回收机制（GC）自动进行内存管理。"),s("br"),a._v(" "),s("strong",[a._v("我们平常接触到JDK JRE JVM，他们之间的关系:")]),a._v(" "),s("br"),a._v("\nJDK涵盖JRE，JRE涵盖JVM。JDK可以看成JRE的一个超集，除了包含JRE，还包含Java开发的编译器(javac .java文件编译成.class文件)、各种诊断工具"),s("br"),a._v("\nJRE就是java的运行环境，包含JVM和java类库，以及一些其他模块等"),s("br"),a._v("\nJVM是实现java语言是解释性语言的主要载体。java源码通过javac编译成.class文件之后，通过JVM将java字节码翻译成真正的机器字节码翻译一句运行一句。同时现在的Hotspot JVM提供了JIT（Just-In——Time）动态编译器，会在运行时将热点代码编译成机器码，放在缓存中，这种情况属于编译执行，而不是解释执行。（感觉像是半编译，半解释的一种语言）")])],1)}),[],!1,null,null,null);t.default=r.exports}}]);