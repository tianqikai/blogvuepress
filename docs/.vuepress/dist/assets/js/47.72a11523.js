(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{1316:function(e,o,t){e.exports=t.p+"assets/img/zookeeper1.295ebb7b.jpg"},1317:function(e,o,t){e.exports=t.p+"assets/img/zookeeper2.24ad3996.jpg"},1318:function(e,o,t){e.exports=t.p+"assets/img/zookeeper3.8630b680.jpg"},1319:function(e,o,t){e.exports=t.p+"assets/img/zookeeper4.4b9cf0c0.jpg"},1320:function(e,o,t){e.exports=t.p+"assets/img/zookeeper5.d221a0cc.jpg"},1321:function(e,o,t){e.exports=t.p+"assets/img/zookeeper6.d70d630d.jpg"},1322:function(e,o,t){e.exports=t.p+"assets/img/zookeeper7.3ae80a8f.jpg"},1323:function(e,o,t){e.exports=t.p+"assets/img/zookeeper8.fbcb1f90.jpg"},1645:function(e,o,t){"use strict";t.r(o);var r=t(26),s=Object(r.a)({},(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_1-zookeeper简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-zookeeper简介"}},[e._v("#")]),e._v(" 1. Zookeeper简介")]),e._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#_1-1-zookeeper概述"}},[e._v("1.1 Zookeeper概述")])]),r("li",[r("a",{attrs:{href:"#_1-2-zookeeper工作机制"}},[e._v("1.2 Zookeeper工作机制")]),r("ul",[r("li",[r("a",{attrs:{href:"#_1-2-1-监听通知机制"}},[e._v("1.2.1 监听通知机制")])])])]),r("li",[r("a",{attrs:{href:"#_1-3-zookeeper特点"}},[e._v("1.3 Zookeeper特点")]),r("ul",[r("li",[r("a",{attrs:{href:"#_1-3-1-文件系统数据结构"}},[e._v("1.3.1 文件系统数据结构")])])])]),r("li",[r("a",{attrs:{href:"#_1-4-zookeeper应用场景"}},[e._v("1.4 Zookeeper应用场景")])]),r("li",[r("a",{attrs:{href:"#_1-5-zookeeper下载地址"}},[e._v("1.5 Zookeeper下载地址")])])])]),r("p"),e._v(" "),r("h2",{attrs:{id:"_1-1-zookeeper概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-zookeeper概述"}},[e._v("#")]),e._v(" 1.1 Zookeeper概述")]),e._v(" "),r("p",[e._v("Zookeeper是源代码开放的分布式协调服务，是一个高性能的分布式数据一致性的解决方案，它将那些复杂的，容易出错的分布式一致性服务封装起来。用户可以通过调用Zookeeper提供的接口来解决一些分布式应用中的实际问题.")]),e._v(" "),r("p",[e._v("Zookeeper 是一个用于"),r("strong",[e._v("存储少量数据的基于内存的数据库")]),e._v("，主要有如下两个核心的概念："),r("strong",[e._v("文件系统数据结构+监听通知机制")]),e._v("。")]),e._v(" "),r("h2",{attrs:{id:"_1-2-zookeeper工作机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-zookeeper工作机制"}},[e._v("#")]),e._v(" 1.2 Zookeeper工作机制")]),e._v(" "),r("p",[e._v("Zookeeper从设计模式的角度上来理解：属于观察者模型的一种分布式服务管理框架；它"),r("font",{attrs:{color:"red"}},[e._v("负责管理大家关心的数据和存储，然后接受观察者的注册")]),e._v(";一旦这些数据的状态发生变化，zookeeper就会负责通知已经在zookeeper上注册的这些观察者做出相关的相应；")],1),e._v(" "),r("hr"),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"zookeeperg工作机制",href:"./image/zookeeper1.jpg"}},[r("img",{attrs:{src:t(1316),alt:"zookeeperg工作机制"}})])]),e._v(" "),r("h3",{attrs:{id:"_1-2-1-监听通知机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-监听通知机制"}},[e._v("#")]),e._v(" 1.2.1 监听通知机制")]),e._v(" "),r("p",[e._v("客户端注册监听它关心的任意节点，或者目录节点及递归子目录节点")]),e._v(" "),r("ol",[r("li",[e._v("如果注册的是对某个节点的监听，则当这个节点被删除，或者被修改时，对应的客户端将被通知")]),e._v(" "),r("li",[e._v("如果注册的是对某个目录的监听，则当这个目录有子节点被创建，或者有子节点被删除，对应的客户端将被通知")]),e._v(" "),r("li",[e._v("如果注册的是对某个目录的递归子节点进行监听，则当这个目录下面的任意子节点有目录结构的变化（有子节点被创建，或被删除）或者根节点有数据变化时，对应的客户端将被通知。")])]),e._v(" "),r("p",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("注意：")])]),e._v(" "),r("strong",[e._v("所有的通知都是一次性的")]),e._v("，及无论是对节点还是对目录进行的监听，一旦触发，对应的监听即被移除。递归子节点，监听是对所有子节点的，所以，每个子节点下面的事件同样只会被触发一次")],1),e._v(" "),r("h2",{attrs:{id:"_1-3-zookeeper特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-zookeeper特点"}},[e._v("#")]),e._v(" 1.3 Zookeeper特点")]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper特点",href:"./image/zookeeper2.jpg"}},[r("img",{attrs:{src:t(1317),alt:"Zookeeper特点"}})])]),e._v(" "),r("ol",[r("li",[e._v("Zookeeper：一个领导者（Leader），多个跟随者（Follower）组成的集群。")]),e._v(" "),r("li",[e._v("集群中只要有半数以上节点存活，Zookeeper集群就能正常服务。")]),e._v(" "),r("li",[e._v("全局数据一致：每个Server保存一份相同的数据副本，Client无论连接到哪个Server，数据都是一致的。")]),e._v(" "),r("li",[e._v("更新请求顺序进行，来自同一个Client的更新请求按其发送顺序依次执行。")]),e._v(" "),r("li",[e._v("数据更新原子性，一次数据更新要么成功，要么失败。")]),e._v(" "),r("li",[e._v("实时性，在一定时间范围内，Client能读到最新数据。")])]),e._v(" "),r("h3",{attrs:{id:"_1-3-1-文件系统数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-文件系统数据结构"}},[e._v("#")]),e._v(" 1.3.1 文件系统数据结构")]),e._v(" "),r("p",[r("strong",[e._v("zookeeper数据结构")]),r("br"),e._v("\nZooKeeper数据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树，每个节点称做一个ZNode。每一个ZNode默认能够存储1MB的数据，每个ZNode都可以通过其路径唯一标识。")]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper数据结构",href:"./image/zookeeper3.jpg"}},[r("img",{attrs:{src:t(1318),alt:"Zookeeper数据结构"}})])]),e._v(" "),r("p",[e._v("每个子目录项都被称作为 znode(目录节点)，和文件系统类似，我们能够自由的增加、删除 znode，在一个znode下增加、删除子znode。")]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("有四种类型的znode：")]),e._v(" "),r("ol",[r("li",[r("p",[r("strong",[e._v("PERSISTENT­持久化目录节点")]),e._v(" 客户端与zookeeper断开连接后，该节点依旧存在，只要不手动删除该节点，他将永远存在")])]),e._v(" "),r("li",[r("p",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("PERSISTENT_SEQUENTIAL­持久化顺序编号目录节点")])]),e._v("  客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号")],1)]),e._v(" "),r("li",[r("p",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("EPHEMERAL­临时目录节点")])]),e._v("  客户端与zookeeper断开连接后，该节点被删除")],1)]),e._v(" "),r("li",[r("p",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("EPHEMERAL_SEQUENTIAL­临时顺序编号目录节点")])]),e._v("  客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号")],1)]),e._v(" "),r("li",[r("p",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("Container 节点（3.5.3 版本新增")])]),e._v(" ，如果Container节点下面没有子节点，则Container节点 在未来会被Zookeeper自动清除,定时任务默认60s 检查一次）")],1)]),e._v(" "),r("li",[r("p",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("TTL 节点( 默认禁用)")])]),e._v(" ，只能通过系统配置 zookeeper.extendedTypesEnabled=true 开启，不稳定)")],1)])])]),e._v(" "),r("h2",{attrs:{id:"_1-4-zookeeper应用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-zookeeper应用场景"}},[e._v("#")]),e._v(" 1.4 Zookeeper应用场景")]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("Zookeeper应用场景")]),e._v(" "),r("ol",[r("li",[e._v("分布式配置中心")]),e._v(" "),r("li",[r("strong",[e._v("分布式注册中心")])]),e._v(" "),r("li",[r("strong",[e._v("分布式锁")])]),e._v(" "),r("li",[e._v("分布式队列")]),e._v(" "),r("li",[r("strong",[e._v("集群选举")])]),e._v(" "),r("li",[e._v("分布式屏障")]),e._v(" "),r("li",[e._v("发布/订阅")])])]),e._v(" "),r("p",[r("strong",[e._v("提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。")])]),e._v(" "),r("ol",[r("li",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("统一命名服务")])])],1)]),e._v(" "),r("p",[e._v("在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。例如：IP不容易记住，而域名容易记住。")]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper统一命名服务",href:"./image/zookeeper4.jpg"}},[r("img",{attrs:{src:t(1319),alt:"Zookeeper统一命名服务"}})])]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("统一配置管理")])])],1)]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("p",[e._v("分布式环境下，配置文件同步非常常见："),r("br"),e._v("\n（1）一般要求一个集群中，所有节点的配置信息是一致的，比如 Kafka 集群。"),r("br"),e._v("\n（2）对配置文件修改后，希望能够快速同步到各个节点上。"),r("br"),e._v("\n配置管理可交由ZooKeeper实现："),r("br"),e._v("\n（1）可将配置信息写入ZooKeeper上的一个Znode。"),r("br"),e._v("\n（2）各个客户端服务器监听这个Znode。"),r("br"),e._v("\n（3）一旦Znode中的数据被修改，ZooKeeper将通知各个客户端服务器。")])]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper统一配置管理",href:"./image/zookeeper5.jpg"}},[r("img",{attrs:{src:t(1320),alt:"Zookeeper统一配置管理"}})])]),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("统一集群管理")])])],1)]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("ol",[r("li",[e._v("分布式环境中，实时掌握每个节点的状态是必要的; 可根据节点实时状态做出一些调整。")]),e._v(" "),r("li",[e._v("ZooKeeper可以实现实时监控节点状态变化; 可将节点信息写入ZooKeeper上的一个ZNode。监听这个ZNode可获取它的实时状态变化。")])])]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper统一集群管理",href:"./image/zookeeper6.jpg"}},[r("img",{attrs:{src:t(1321),alt:"Zookeeper统一集群管理"}})])]),e._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("服务器节点动态上下线")])])],1)]),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper服务器节点动态上下线",href:"./image/zookeeper7.jpg"}},[r("img",{attrs:{src:t(1322),alt:"Zookeeper服务器节点动态上下线"}})])]),e._v(" "),r("ol",{attrs:{start:"5"}},[r("li",[r("font",{attrs:{color:"red",size:"4"}},[r("strong",[e._v("软负载均衡")])])],1)]),e._v(" "),r("p",[r("font",{attrs:{color:"red"}},[r("strong",[e._v("在Zookeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求")])])],1),e._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"Zookeeper软负载均衡",href:"./image/zookeeper8.jpg"}},[r("img",{attrs:{src:t(1323),alt:"Zookeeper软负载均衡"}})])]),e._v(" "),r("h2",{attrs:{id:"_1-5-zookeeper下载地址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-zookeeper下载地址"}},[e._v("#")]),e._v(" 1.5 Zookeeper下载地址")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://zookeeper.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网首页"),r("OutboundLink")],1)])])}),[],!1,null,null,null);o.default=s.exports}}]);