(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{1543:function(e,l,t){"use strict";t.r(l);var v=t(26),r=Object(v.a)({},(function(){var e=this,l=e.$createElement,v=e._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"_1-springmvc请求流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-springmvc请求流程"}},[e._v("#")]),e._v(" 1. SpringMVC请求流程")]),e._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[e._v("Spring MVC组成")]),e._v(" "),v("ul",[v("li",[e._v("前端控制器（DispatcherServlet）、")]),e._v(" "),v("li",[e._v("请求到处理器映射（HandlerMapping）、")]),e._v(" "),v("li",[e._v("处理器适配器（HandlerAdapter）、")]),e._v(" "),v("li",[e._v("视图解析器（ViewResolver）、")]),e._v(" "),v("li",[e._v("处理器或页面控制器（Controller）、")]),e._v(" "),v("li",[e._v("验证器（ Validator）、")]),e._v(" "),v("li",[e._v("命令对象（Command 请求参数绑定到的对象就叫命令对象）、")]),e._v(" "),v("li",[e._v("表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）")])])]),e._v(" "),v("h2",{attrs:{id:"_1-1-mvc模型-model2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-mvc模型-model2"}},[e._v("#")]),e._v(" 1.1 MVC模型-Model2")]),e._v(" "),v("p",[e._v("Model2 模型是在 Model1 的基础上进行改良，它是 MVC 模型的一个经典应用。它把处理请求 和展示数据进行分离，让每个部分各司其职。 此时的 JSP 已经就是纯粹的展示数据了，而处理请求的事情交由控制器来完成，使 每个组件充分独立，提高了代码可重用性和易维护性。下图展示的就是 Model2 模型：")]),e._v(" "),v("p",[v("img",{attrs:{src:t(951),alt:"./images/SpringMvc01.png"}})]),e._v(" "),v("h2",{attrs:{id:"model-2是基于mvc架构的设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#model-2是基于mvc架构的设计模式"}},[e._v("#")]),e._v(" "),v("strong",[e._v("Model 2是基于MVC架构的设计模式")])]),e._v(" "),v("ol",[v("li",[e._v("在Model 2架构中，Servlet作为前端控制器，负责接收客户端发送的请求")]),e._v(" "),v("li",[e._v("在Servlet中只包含控制逻辑和简单的前端处理；")]),e._v(" "),v("li",[e._v("后端JavaBean来完成实际的逻辑处理；")]),e._v(" "),v("li",[e._v("最后转发到相应的JSP页面处理显示逻辑。")])]),e._v(" "),v("p",[v("code",[e._v("Model 2具有组件化的特点，更适用于大规模应用的开发")])]),e._v(" "),v("h2",{attrs:{id:"_1-2-springmvc-的执行过程分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-springmvc-的执行过程分析"}},[e._v("#")]),e._v(" 1.2 SpringMVC 的执行过程分析")]),e._v(" "),v("p",[v("img",{attrs:{src:t(952),alt:"./images/SpringMvc02.png"}})]),e._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("前端控制器DispatcherServlet 由框架提供")]),e._v(" "),v("ul",[v("li",[e._v("作用：接收请求，处理响应结果")])])]),e._v(" "),v("li",[v("p",[e._v("处理器映射器HandlerMapping由框架提供")]),e._v(" "),v("ul",[v("li",[e._v("作用：根据请求URL，找到对应的Handler")])])]),e._v(" "),v("li",[v("p",[e._v("处理器适配器HandlerAdapter由框架提供")]),e._v(" "),v("ul",[v("li",[e._v("作用：调用处理器（Handler|Controller）的方法")])])]),e._v(" "),v("li",[v("p",[e._v("处理器Handler又名Controller,后端处理器")]),e._v(" "),v("ul",[v("li",[e._v("作用：接收用户请求数据，调用业务方法处理请求")])])]),e._v(" "),v("li",[v("p",[e._v("视图解析器ViewResolver由框架提供")]),e._v(" "),v("ul",[v("li",[e._v("作用：视图解析，把逻辑视图名称解析成真正的物理视图 支持多种视图技术：JSTLView,FreeMarker...")])])]),e._v(" "),v("li",[v("p",[e._v("视图View,程序员开发")]),e._v(" "),v("ul",[v("li",[e._v("作用：将数据展现给用户")])])])])]),e._v(" "),v("p",[v("img",{attrs:{src:t(953),alt:"./images/SpringMVC04.png"}})]),e._v(" "),v("ol",[v("li",[v("p",[e._v("首先用户发送请求,请求被SpringMvc前端控制器（DispatherServlet）捕获；")])]),e._v(" "),v("li",[v("p",[e._v("前端控制器(DispatherServlet)对请求URL解析获取请求URI,根据URI, 调用HandlerMapping；")])]),e._v(" "),v("li",[v("p",[e._v("前端控制器(DispatherServlet)获得返回的HandlerExecutionChain（包括Handler对象以及Handler对象对应的拦截器）；")])]),e._v(" "),v("li",[v("p",[e._v("DispatcherServlet 根据获得的HandlerExecutionChain，选择一个合适的HandlerAdapter。（附")]),e._v(" "),v("ul",[v("li",[e._v("注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(...)方法）；")])])]),e._v(" "),v("li",[v("p",[e._v("HandlerAdapter根据请求的Handler适配并执行对应的Handler；HandlerAdapter(提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。")]),e._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[e._v("在填充Handler的入参过程中，根据配置，Spring将做一些额外的工作：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[e._v(" - `HttpMessageConveter`： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息。\n - `数据转换`：对请求消息进行数据转换。如String转换成Integer、Double等数据格式化：\n - `数据格式化`: 如将字符串转换成格式化数字或格式化日期等\n - `数据验证`： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中）\n")])])])])]),e._v(" "),v("li",[v("p",[e._v("Handler执行完毕，返回一个ModelAndView(即模型和视图)给HandlerAdaptor")])]),e._v(" "),v("li",[v("p",[e._v("HandlerAdaptor适配器将执行结果ModelAndView返回给前端控制器。")])]),e._v(" "),v("li",[v("p",[e._v("前端控制器接收到ModelAndView后，请求对应的视图解析器。")])]),e._v(" "),v("li",[v("p",[e._v("视图解析器解析ModelAndView后返回对应View;")])]),e._v(" "),v("li",[v("p",[e._v("渲染视图并返回渲染后的视图给前端控制器。")])]),e._v(" "),v("li",[v("p",[e._v("最终前端控制器将渲染后的页面响应给用户或客户端")])])])])}),[],!1,null,null,null);l.default=r.exports},951:function(e,l,t){e.exports=t.p+"assets/img/SpringMvc01.ddaf2575.png"},952:function(e,l,t){e.exports=t.p+"assets/img/SpringMvc02.b7ffd081.png"},953:function(e,l,t){e.exports=t.p+"assets/img/SpringMVC04.988a551b.png"}}]);